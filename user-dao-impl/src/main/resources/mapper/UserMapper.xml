<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.digital.dance.dao.UserDao">
	<resultMap id="userResultMap" type="userEO">
		<id column="userId" jdbcType="VARCHAR" property="userId" />
		<result column="userName" jdbcType="VARCHAR" property="userName" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="rolePrivilegeInd" jdbcType="BIT" property="rolePrivilegeInd" />
		<result column="state" jdbcType="INTEGER" property="state" />
		<result column="insertOn" jdbcType="TIMESTAMP" property="insertOn" />
		<result column="insertBy" jdbcType="VARCHAR" property="insertBy" />
		<result column="updateOn" jdbcType="TIMESTAMP" property="updateOn" />
		<result column="updateBy" jdbcType="VARCHAR" property="updateBy" />
	</resultMap>

	<sql id="Base_Column_List">
		userId, userName, password, email, phone, rolePrivilegeInd, state, insertOn, insertBy,
		updateOn, updateBy
	</sql>
	<!-- 插入用户数据-->
	<insert id="addUser" keyProperty="userId" useGeneratedKeys="false" parameterType="userEO">
	       <![CDATA[
	      	insert into sys_user (userId, userName, password,
			  email, phone, rolePrivilegeInd,
			  state, insertOn, insertBy,
			  updateOn, updateBy)
			values (#{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
			  #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{rolePrivilegeInd,jdbcType=BIT},
			  #{state,jdbcType=INTEGER}, #{insertOn,jdbcType=TIMESTAMP}, #{insertBy,jdbcType=VARCHAR},
			  #{updateOn,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR})
	      ]]>
	</insert>   
  
	<select id="findUserByUserName" resultMap="userResultMap" parameterType="string">
		select
		<include refid="Base_Column_List" />
		from sys_user
		where userName=#{userName,jdbcType=VARCHAR} limit 1
		
	</select>
  
  <select id="findUserByUserId" resultMap="userResultMap" parameterType="string">
	  select
	  <include refid="Base_Column_List" />
	  from sys_user
	  where userId = #{userId,jdbcType=VARCHAR} limit 1
		
	</select>
	
	<select id="findPagedUsers" resultMap="userResultMap" parameterType="userEO">
		select
		<include refid="Base_Column_List" />
		from sys_user where 1=1
		<if test="userId != null">
		    and userId =#{userId,jdbcType=VARCHAR}
	    </if>
		<if test="userName != null">
		    and userName =#{userName,jdbcType=VARCHAR}
		</if>
		<if test="password != null">
		    and password =#{password,jdbcType=VARCHAR}
	    </if>
		<if test="email != null">
		    and email =#{email,jdbcType=VARCHAR}
		</if>
		<if test="phone != null">
		    and phone =#{phone,jdbcType=VARCHAR}
	    </if>
		<if test="state != null">
			and state =#{state,jdbcType=VARCHAR}
		</if>
		<if test="rolePrivilegeInd != null">
		    and rolePrivilegeInd =#{rolePrivilegeInd,jdbcType=VARCHAR}
		</if> limit #{pageSize,jdbcType=INTEGER} offset #{offsetNum,jdbcType=INTEGER} 
		
	</select>
  
  	<select id="findAllUsers" resultMap="userResultMap" parameterType="userEO">

		select
		<include refid="Base_Column_List" />
		from sys_user where 1=1
				<if test="userId != null">
				    and userId =#{userId,jdbcType=VARCHAR}
			    </if>
				<if test="userName != null">
				    and userName =#{userName,jdbcType=VARCHAR}
				</if>
				<if test="email != null">
				    and email =#{email,jdbcType=VARCHAR}
			    </if>
				<!-- <if test="userEmail != null">
				    and userEmail =#{userEmail,jdbcType=VARCHAR}
				</if> -->
				<if test="phone != null">
				    and phone =#{phone,jdbcType=VARCHAR}
			    </if>
				<if test="state != null">
				    and state =#{state,jdbcType=VARCHAR}
				</if> 

	</select>

	<select id="searchPagedUsers" resultMap="userResultMap"
		parameterType="userEO">
		select
		<include refid="Base_Column_List" />
		from sys_user where 1=1
		<if test="userId != null">
			and userId like
			concat(concat('%',#{userId,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null">
			and userName like
			concat(concat('%',#{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userDisplayName != null">
			and email like
			concat(concat('%',#{email,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userEmail != null">
			and phone like
			concat(concat('%',#{phone,jdbcType=VARCHAR}),'%')
		</if>

		limit #{pageSize,jdbcType=INTEGER} offset
		#{offsetNum,jdbcType=INTEGER}
	</select>

	<select id="searchAllUsers" resultMap="userResultMap"
		parameterType="userEO">
		select
		<include refid="Base_Column_List" />
		from sys_user where 1=1
		<if test="userId != null">
			and userId like
			concat(concat('%',#{userId,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null">
			and userName like
			concat(concat('%',#{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="email != null">
			and email like
			concat(concat('%',#{email,jdbcType=VARCHAR}),'%')
		</if>

	</select>
	
	<update id="updateUsers" parameterType="userEO">
	       
	       <foreach item="item" collection="list" index="index" separator=";"> 
		      update sys_user
			     <trim prefix="set" suffixOverrides=",">
					<if test="item.userName != null">
					    userName =#{item.userName,jdbcType=VARCHAR},
					</if>
					<if test="item.phone != null">
						phone =#{item.phone,jdbcType=VARCHAR},
				    </if>
					<if test="item.email != null">
					    email =#{item.email,jdbcType=VARCHAR},
					</if>
			   		<if test="item.rolePrivilegeInd != null">
						rolePrivilegeInd =#{item.rolePrivilegeInd,jdbcType=VARCHAR},
					</if>
				</trim>
		      where userId = #{item.userId,jdbcType=VARCHAR};
	     </foreach> 
	</update>   
  
	<delete id="deleteUsers" parameterType="userEO">
		<foreach item="item" collection="list" index="index" separator=";">
			 delete from sys_user where userId = #{item.userId,jdbcType=VARCHAR}
		</foreach>
	</delete>

	<select id="checkUser" resultMap="userResultMap" >
		select
		<include refid="Base_Column_List" />
		from sys_user where email=#{userEmail,jdbcType=VARCHAR} and password=#{password,jdbcType=VARCHAR}

	</select>

	<select id="validatToken" resultType="java.lang.Integer" >
		SELECT
		count(1)
		FROM user_token where token=#{token,jdbcType=VARCHAR}

	</select>

	<insert id="saveToken" useGeneratedKeys="false" parameterType="string">
		<![CDATA[
	      insert into user_token
	      (
				token
		  )
	      values
	      (
				#{token,jdbcType=VARCHAR}
	      )
	      ]]>
	</insert>
</mapper>